#include "/Engine/Public/Platform.ush"


float2 PixelUVSize;

// K1, K2, K3
float3 RadialDistortionCoefs;

// P1, P2
float2 TangentialDistortionCoefs;

float4 UndistortedCameraMatrix;
float4 DistortedCameraMatrix;
float2 OutputMultiplyAndAdd;

float2 UndistortNormalizedViewPosition(float2 V)
{
	float2 V2 = V * V;
	float R2 = V2.x + V2.y;

	float2 UndistortedV = V * (1.0 + R2 * (RadialDistortionCoefs.x + R2 * (RadialDistortionCoefs.y + R2 * RadialDistortionCoefs.z)));
	UndistortedV.x += TangentialDistortionCoefs.y * (R2 + 2 * V2.x) + 2 * TangentialDistortionCoefs.x * V.x * V.y;
	UndistortedV.y += TangentialDistortionCoefs.x * (R2 + 2 * V2.y) + 2 * TangentialDistortionCoefs.y * V.x * V.y;
	return UndistortedV;
}

float2 UndistortViewportUV(float2 ViewportUV)
{
	float2 DistortedViewPosition = (ViewportUV - DistortedCameraMatrix.zw) / DistortedCameraMatrix.xy;
	float2 UndistortedViewPosition = UndistortNormalizedViewPosition(DistortedViewPosition);
	return UndistortedCameraMatrix.xy * UndistortedViewPosition + UndistortedCameraMatrix.zw;
}

float2 FlipUV(float2 UV)
{
	return float2(UV.x, 1 - UV.y);
}

void MainVS(in uint GlobalVertexId : SV_VertexID, out float2 OutVertexDistortedViewportUV : TEXCOORD0, out float4 OutPosition : SV_POSITION)
{
	uint GridCellIndex = GlobalVertexId / 6;

	uint GridColumnId = GridCellIndex / GRID_SUBDIVISION_Y;
	uint GridRowId = GridCellIndex - GridColumnId * GRID_SUBDIVISION_Y;
	uint VertexId = GlobalVertexId - GridCellIndex * 6;
	
	float2 CellVertexUV = float2(0x1 & ((VertexId + 1) / 3), VertexId & 0x1);
	float2 GridInvSize = 1.f / float2(GRID_SUBDIVISION_X, GRID_SUBDIVISION_Y);
	float2 GridVertexUV = FlipUV(GridInvSize * (CellVertexUV + float2(GridColumnId, GridRowId)));
	
	GridVertexUV -= PixelUVSize * 0.5;
	OutPosition = float4(FlipUV(UndistortViewportUV(GridVertexUV) + PixelUVSize * 0.5) * 2 - 1, 0, 1);
	OutVertexDistortedViewportUV = GridVertexUV;
}


void MainPS(in noperspective float2 VertexDistortedViewportUV : TEXCOORD0, in float4 SvPosition : SV_POSITION, out float4 OutColor : SV_Target0)
{
	float2 ViewportUV = SvPosition.xy * PixelUVSize;
	ViewportUV -= PixelUVSize * 0.5;
	
	float2 DistortUVtoUndistortUV = (UndistortViewportUV((ViewportUV))) - ViewportUV;
	float2 UndistortUVtoDistortUV = VertexDistortedViewportUV - ViewportUV;

	OutColor = OutputMultiplyAndAdd.y + OutputMultiplyAndAdd.x * float4(DistortUVtoUndistortUV, UndistortUVtoDistortUV);
}

